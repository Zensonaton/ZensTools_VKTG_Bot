# coding: utf-8

import 	json
from 	typing import Any, Tuple
from    aiogram             import 	Bot, types, md
from    aiogram.dispatcher  import 	Dispatcher
from    aiogram.utils       import 	executor, markdown
from 	aiogram.types 		import 	ReplyKeyboardRemove, \
									ReplyKeyboardMarkup, KeyboardButton, \
									InlineKeyboardMarkup, InlineKeyboardButton, Update
import 	aiohttp
from    dotenv              import 	load_dotenv
import 	BL_Utils			as _BL
import 	BL_AutoParser		as BL
from 	Utils 				import 	int_to_emojis, load_data, random_uuid, save_data, seconds_to_userfriendly_string, today_date, unix_time
from 	textwrap 			import 	shorten
import 	traceback
import 	datetime
import 	logging
import 	asyncio
import 	time
import 	sys
import 	os

# –ú–µ–Ω—è–µ–º Timezone:
os.environ["TZ"] = "Asia/Almaty"
time.tzset()

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª.
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
bot = Bot(
	token       = os.environ["TG_TOKEN"],
	parse_mode  = types.ParseMode.HTML
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥.
dp = Dispatcher(bot)

# // TODO: —Å—Å—ã–ª–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–∫ —á–µ—Ä–µ–∑ /[a]schedule

if not os.path.exists("./Logs/"):
	os.mkdir("./Logs/")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
logger = logging.getLogger(__name__)
streamHandler = logging.StreamHandler()
streamHandler.setFormatter(logging.Formatter("[%(levelname)-8s %(asctime)s at %(name)s.%(funcName)s]: %(message)s", "%d.%d.%Y %H:%M:%S"))
streamHandler.setLevel(logging.DEBUG)
logger.addHandler(streamHandler)
fileHandler = logging.FileHandler("Logs/TGBot.log")
fileHandler.setFormatter(logging.Formatter("[%(levelname)-8s %(asctime)s at %(name)s.%(funcName)s]: %(message)s", "%d.%d.%Y %H:%M:%S"))
fileHandler.setLevel(logging.DEBUG)
logger.addHandler(fileHandler)

# –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫:
smaller_lesson_names = {
	"–ê–ª–≥–µ–±—Ä–∞ –∏ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞": "–ê–ª–≥–µ–±—Ä–∞",
	"–†—É—Å—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–†—É—Å. –ª–∏—Ç.",
	"–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫": "–ê–Ω–≥–ª. —è–∑.",
	"–ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–ö–∞–∑. —è–∑/–ª–∏—Ç.",
	"–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (5-11 –∫–ª–∞—Å—Å—ã)": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
	"–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞": "–§–∏–∑/—Ä–∞",
	"–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑.",
	"–û—Å–Ω–æ–≤—ã –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –±–∏–∑–Ω–µ—Å–∞": "–û—Å–Ω. –±–∏–∑–Ω–µ—Å–∞",
}

UPTIME = unix_time()

@dp.message_handler(commands = ["start", "start", "—Å—Ç–∞—Ä—Ç",])
async def message_handler(msg: types.Message):
	#–£ –±–æ—Ç–∞ –µ—Å—Ç—å <a href='https://github.com/Zensonaton/ZensonatonTools_TGBot'>–æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥</a>, –ø–æ—ç—Ç–æ–º—É —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç '–∑–∞ –∫—É–ª–∏—Å–∞–º–∏'.
	await msg.answer(
		"<b>–ü—Ä–∏–≤–µ—Ç!</b> üëã\n–î–∞–Ω–Ω—ã–π –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –æ—Ç Bilimland –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∏–Ω–∞ + –ø–∞—Ä–æ–ª—è. <i>(–æ–¥–Ω–∞–∫–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –°–û–†–∞–º–∏ –∏–ª–∏ –°–û–ß–∞–º–∏.)</i>\n\n–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —è —Å–æ–≤–µ—Ç—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É <code>/help</code>, –æ–¥–Ω–∞–∫–æ —Ç—ã –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É <code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code> –≤ –¥–µ–π—Å—Ç–≤–∏–∏."
	)

@dp.message_handler(commands=["help", "–∫–æ–º–∞–Ω–¥—ã", "–ø–æ–º–æ—â—å", "info", "–∏–Ω—Ñ–æ"])
async def help(msg: types.Message):
	await msg.answer(
		f"‚ÑπÔ∏è <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —É –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞</b>:\n\n/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å ‚Äî –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç Bilimland.\n/schedule ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ –≤ Bilimland, –∞ —Ç–∞–∫ –∂–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–≤–µ—Ç—ã. –¢–∞–∫ –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: <code>/schedule –¥–¥.–º–º.–≥–≥</code>. <i>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.</i>\n/feedback ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É –±–æ—Ç–∞ –≤ —Å–ª—É—á–∞–µ, –∫ –ø—Ä–∏–º–µ—Ä—É, –±–∞–≥–∞.\n/stats ‚Äî —Ä–∞–∑–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞.\n/logout ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Bilimland, –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–æ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.\n\nüêõüî´ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —É –±–æ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö:\n<b>1</b>. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ 23:00 - 00:00.\n–í—Å–µ —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã –±—É–¥—É—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n<span class=\"tg-spoiler\">üöß –§—É–Ω–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π <b>–±–æ—Ç, —Å–∞–º, –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ</b>, –±—É–¥–µ—Ç —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —É–∂–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞!</span>"
	)

@dp.message_handler(commands=["stats", "stat", "—Å—Ç–∞—Ç—ã", "statistics", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
async def stats(msg: types.Message):
	bot_data = load_data("Bot.json")

	startDate = datetime.datetime.strptime(bot_data['StartTimestamp'], '%d.%m.%Y %H:%M:%S')

	await msg.answer(
		f"–ó–∞ <b>{(datetime.datetime.now() - startDate).days}</b> –¥–Ω–µ–π —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã, <i>(–ø–µ—Ä–∏–æ–¥ —Å <b>{startDate}</b> –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)</i> –±–æ—Ç —Å—É–º–µ–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å <b>{bot_data['WeeksAnalyzed']}</b> —É—á–µ–±–Ω—ã—Ö –Ω–µ–¥–µ–ª—å, —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ ‚Äî <b>{bot_data['LessonsAnalyzed']}</b>. –ê–∫—Ç–∏–≤–Ω—ã—Ö <s>—Å–ø–∏—Å—ã–≤–∞—é—â–∏—Ö</s> –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö —Å–µ–±—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –±–æ—Ç–∞ ‚Äî <b>{bot_data['UniqueUsers']}</b>, —Å–µ—Å—Å–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ <i>(—Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–≤—ã–ø—É—â–µ–Ω–æ)</i>: <b>{bot_data['TokensGotRefreshed']}</b>. Uptime –±–æ—Ç–∞: <b>{seconds_to_userfriendly_string(unix_time() - UPTIME, weeks=True, months=True)}</b>."
	)

@dp.message_handler(commands = ["login", "–ª–æ–≥–∏–Ω"])
async def login_handler(msg: types.Message):
	arguments = msg.get_args().split(" ") # pyright: reportOptionalMemberAccess=false

	if len(arguments) != 2:
		await msg.answer("–î–ª—è –≤—Ö–æ–¥–∞ –Ω—É–∂–µ–Ω –ª–æ–≥–∏–Ω <b>–∏</b> –ø–∞—Ä–æ–ª—å.\n\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: <code>/login alexey_victor 123456</code>")
		return

	# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∏.
	await msg.delete()

	await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —è –ø–æ–ø—Ä–æ–±—É—é –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π. üôÉüëç\n\n<i>(–ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö.)</i> üëÄ")
	greet_sticker = await msg.answer_sticker("CAACAgEAAxkBAAEDEzlhZ-J2G8SuIVt0ahDnsHMAAbt-jfwAAudrAAKvGWIHhIr-D4PhzQQhBA")

	# –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.
	login_result = await BL.login(arguments[0], arguments[1], msg.from_user.id, True)

	# –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, login_result –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ç—Ä–∏–±—É—Ç–µ "message".
	if "message" in login_result:
		# –£–¥–∞–ª—è–µ–º —Ä–∞–¥–æ—Å—Ç–Ω—ã–π —Å—Ç–∏–∫–µ—Ä.
		await greet_sticker.delete()

		await msg.answer_sticker("CAACAgEAAxkBAAEDEzthZ-PBNrIKxd1YItQmcTItwNi1VwACcIMAAq8ZYgfAbLJhK3qxuiEE")

		if login_result["message"] == "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å":
			await msg.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: <b>–ü–∞—Ä–æ–ª—å –∏/–ª–∏ –ª–æ–≥–∏–Ω –Ω–µ –≤–µ—Ä–Ω—ã</b>. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!") 
		else:
			await msg.answer(f"–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —è –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ç–∞–∫–æ–π –æ—à–∏–±–∫–µ: <code>{login_result['message']}</code>.") 

		return

	await msg.answer(f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ø–∞—Ä–æ–ª—å –∏ –ª–æ–≥–∏–Ω –≤–µ—Ä–Ω—ã, –∏ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, <b><i>{login_result['FirstName']}!</i></b> üëç\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: /schedule")

@dp.message_handler(commands = ["logout", "logoff", "leave", "stop", "quit", "–≤—ã—Ö–æ–¥"])
async def logout_handler(msg: types.Message):
	# –ü–æ–ª—É—á–∏–º –ø–æ–ª —á–µ–ª–æ–≤–µ–∫–∞, –∏ –¥–∞–ª–µ–µ —É–¥–∞–ª–∏–º –¥–∞–Ω–Ω—ã–µ.
	user_data = load_data(f"User-{msg.from_user.id}.json")
	male = user_data.get("Male")

	if male is None:
		# –Æ–∑–µ—Ä –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.
		await msg.answer("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã —É–∂–µ –≤—ã—à–µ–ª<i>(-—à–ª–∞)</i> –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Bilimland.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>, —á—Ç–æ –±—ã –≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å–Ω–æ–≤–∞.")
		return 

	os.remove(f"Data/User-{msg.from_user.id}.json")

	await msg.answer_sticker("CAACAgEAAxkBAAEDueFh6rb-9Kfrru1hc5Xe9WeysajuugACpYMAAq8ZYgfsx0PGPxH8hCME")
	await msg.answer(f"–¢—ã —É—Å–ø–µ—à–Ω–æ {'–≤—ã—à–µ–ª' if male else '–≤—ã—à–ª–∞'} –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Bilimland, —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –ú–Ω–µ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –∂–∞–ª—å, —á—Ç–æ —Ç–∞–∫ –≤—ã—à–ª–æ. üòûüëã\n\n–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ-–æ—à–∏–±–∫–µ, —Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π <code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>, —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å –≤—Å—ë –Ω–∞–∑–∞–¥!")

@dp.message_handler(commands = ["auto", "autoschedule", "asched", "aschedule", "autowork"])
async def aschedule_handler(msg: types.Message):
	return # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
	
	async def _downloadMoreInfo(token: str, scheduleID: str, lesson: dict):
		oldLesson = lesson.copy()

		more_lesson_data = await BL.get_lesson_info(token, scheduleID)
		BL.merge(oldLesson, more_lesson_data["data"])

		return more_lesson_data["data"]

	user_data = load_data(f"User-{msg.from_user.id}.json", required_keys=["Token"])
	bot_data = load_data("Bot.json")

	agreement = user_data.get("AutoLessonCompletionAgreement", False)
	male = user_data["Male"]

	if not agreement:
		user_data.update({"AScheduleCommandUsedTimestamp": unix_time()})

		await msg.answer(
f"""‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è <b>–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —è –ø–æ–∑–≤–æ–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–µ–±–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∫–æ–µ —á—Ç–æ –ø—Ä–∏–Ω—è—Ç—å, –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è, <u>–ø–æ—ç—Ç–æ–º—É –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –ü–†–û–ß–¢–ò –í–°–Å –ß–¢–û –ù–ê–ü–ò–°–ê–ù–û –ù–ò–ñ–ï!</u></b> ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ <b>–±–µ—Ç–∞-—Ç–µ—Å—Ç–µ</b>, –∏ –ø–æ—ç—Ç–æ–º—É —É –Ω–µ—ë –µ—Å—Ç—å –±–∞–≥–∏, –æ—à–∏–±–∫–∏, –∏ –ø—Ä–æ—á–∏–µ –±–µ–¥—ã. –° —ç—Ç–∏–º, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –Ω–∏—á–µ–≥–æ –ø–æ–¥–µ–ª–∞—Ç—å –Ω–µ–ª—å–∑—è: –í–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —É –º–µ–Ω—è –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ –±—ã —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Å–¥–µ–ª–∞—Ç—å –±–µ–∑ –±–∞–≥–æ–≤.
–¢–µ–ø–µ—Ä—å —è —Ö–æ—á—É —á—Ç–æ –±—ã —Ç—ã –ø—Ä–æ—á–∏—Ç–∞–ª{'' if male else '–∞'} —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:
<b><u>1. –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–æ–≥–¥–∞ –ª–æ–º–∞–µ—Ç —É—Ä–æ–∫–∏, —á—Ç–æ –≤ –Ω–∏—Ö –¥–∞–∂–µ –Ω–µ–ª—å–∑—è –∑–∞—Ö–æ–¥–∏—Ç—å</u></b>. –£—á–∏—Ç–µ–ª—è –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å <i>(–Ω–µ —Ñ–∞–∫—Ç?)</i>, —á—Ç–æ —É —É—Ä–æ–∫–∞ –µ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –µ–≥–æ –±–∞–ª–ª, –Ω–æ, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–π–¥—É—Ç –≤ –Ω–µ–≥–æ, —Ç–æ —É–≤–∏–¥—è—Ç –æ—à–∏–±–∫—É (–µ—Å–ª–∏ –µ—ë –≤–∏–¥–∏—à—å —Ç—ã, –≤ —É—Ä–æ–∫–∞—Ö, –≤ –∫–æ—Ç–æ—Ä–æ–π –æ—à–∏–±–∫–∏ –Ω–µ—Ç, –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ –∏ —É —É—á–∏—Ç–µ–ª—è). –¢—É—Ç –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ö–∏—Ç—Ä–æ—Å—Ç—å, –∏ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ <i>¬´–£ –º–µ–Ω—è –±–∏–ª–∏–º–ª–µ–Ω–¥ —Ç–æ–∂–µ –æ—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –≤–µ—â–∏ –ø–æ–∫–∞–∑—ã–≤–∞–ª!¬ª</i>.
<b><u>2. –ë–æ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–∞ 100% –ø—Ä–∞–≤–∏–ª—å–Ω–æ</u></b>. –¢—É—Ç —Ç–æ—á–Ω–æ —Ç–æ–∂–µ —Å–∞–º–æ–µ, —É –º–µ–Ω—è, —Å–æ–∑–¥–∞—Ç–µ–ª—è, –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–æ, —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª index.json –Ω–µ —É–±–µ—Ä—É—Ç, —Ç–æ —è —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –±—É–¥—É –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å.
<b><u>3. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏ —Å–∞–º –±–æ—Ç –º–æ–≥—É—Ç —Ä–µ–∑–∫–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å</u></b>. –ö–∞–∫ –±—ã–ª–æ –æ—Ç–º–µ—á–µ–Ω–æ –≤ –ø—É–Ω–∫—Ç–µ 2, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∏ —Å–∞–º –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç, –µ—Å–ª–∏ –≤ Bilimland –∏–∑–º–µ–Ω—è—Ç –∫–æ–µ-—á—Ç–æ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —Ñ–∞–π–ª–æ–º index.json. –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –Ω–µ —á–∏—Ç–∞–ª, –º–æ–∂–Ω–æ<a href="https://vk.com/zensonatontools?w=wall-199464710_40%2Fall">–ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç—É—Ç</a>.
<b><u>4. –°–æ–≥–ª–∞—à–∞—è—Å—å, —Ç—ã –¥–∞—à—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–Ω–µ, —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞, –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —É—Ä–æ–∫ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å</u></b>. –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏, –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
<b><u>5. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</u></b>. –£–≤—ã, –Ω–æ –µ—Å—Ç—å <b>–æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π</b> —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª–∏ Bilimland –∑–∞–º–µ—Ç—è—Ç —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ, –∏ –∑–∞–±–ª–æ–∫–∏—Ä—É—é—Ç –∞–∫–∫–∞—É–Ω—Ç. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —Å–æ –º–Ω–æ–π, —Ç–æ —è –æ–± —ç—Ç–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂—É –∏ –∑–∞–ø—Ä–µ—â—É –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–æ –µ—Å–ª–∏ —Ç—ã —Å—Ç–æ–ª–∫–Ω–µ—à—å—Å—è —Å —ç—Ç–∏–º, —Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Å—å –∫–æ –º–Ω–µ: /feedback
 
–ü–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –≤—Å–µ–≥–æ —ç—Ç–æ–≥–æ, –µ—Å–ª–∏ —Ç—ã {'—Å–æ–≥–ª–∞—Å–µ–Ω' if male else '—Å–æ–≥–ª–∞—Å–Ω–∞'}, —Ç–æ –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /aschedule_i_accept_the_fact_that_something_may_go_wrong. –ù–æ –∞ –µ—Å–ª–∏ —Ç—ã –Ω–µ {'—Å–æ–≥–ª–∞—Å–µ–Ω' if male else '—Å–æ–≥–ª–∞—Å–Ω–∞'}, —Ç–æ –ø—Ä–æ—Å—Ç–æ <b>–Ω–µ</b> –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É.""", disable_web_page_preview=True)
		save_data(user_data, f"User-{msg.from_user.id}.json")

		return

	# –í –¥–∞–Ω–Ω–æ–º –∫—É—Å–∫–µ –∫–æ–¥–∞, –º—ã –º–æ–∂–µ–º –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–µ–Ω —Å–æ –≤—Å–µ–º –≤—ã—à–µ.

	schedule_date = today_date()
	arguments = msg.get_args().split(" ")
	dateWasGiven = False
	if len(arguments) == 1 and arguments[0] != "":
		try:
			schedule_date_dt = datetime.datetime.strptime(arguments[0], "%d.%m.%y")
			schedule_date = schedule_date_dt.strftime("%d.%m.%Y") # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º "1.2.33" –≤ "1.2.3333"
			dateWasGiven = True
		except ValueError:
			await msg.answer(f"<i>–£–ø—Å</i>, —Ç—ã {'–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª' if user_data['Male'] else '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞'} –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã üëÄ.\n\n‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: <code>–¥–¥.–º–º.–≥–≥</code>.\n–ü—Ä–∏–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã: <code>{today_date()}</code>.")
			return

	try:
		full_schedule = await BL.get_schedule(
			user_data["Token"], schedule_date)
	except Exception as error:
		logger.exception(error)

		await msg.answer_sticker("CAACAgEAAxkBAAEDEzthZ-PBNrIKxd1YItQmcTItwNi1VwACcIMAAq8ZYgfAbLJhK3qxuiEE")

		await msg.answer("<i>–£–ø—Å</i>, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–º–∞–ª–∞—Å—å üò®\n\n–ü–æ–ø—Ä–æ–±—É–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –≤–µ–¥—å —è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–µ-–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª —Ç–µ–±—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É <code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>.\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, —Ç–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /feedback.")
		# del user_data["Token"]
		save_data(user_data, f"User-{msg.from_user.id}.json")

		return

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
	if schedule_date not in full_schedule["days"]:
		await msg.answer(f"<i>–£–ø—Å!</i> {'–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —è' if dateWasGiven else '–Ø'} —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–æ–π, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. {'–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑ –∑–∞ –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤–≤—ë–ª<i>(-–∞)</i>, –ª–∏–±–æ –∂–µ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑-–∑–∞ –±–∞–≥–∞, —á—Ç–æ' if dateWasGiven else '–≠—Ç–æ—Ç –±–∞–≥'} –º–Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ. –ê —Å–µ–π—á–∞—Å, —Ç—ã –º–æ–∂–µ—à—å –ª–∏—à—å –ø–æ–¥–æ–∂–¥–∞—Ç—å <code>00:00</code>, –∞ –µ—â—ë –±—É–¥–µ—Ç –ª—É—á—à–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞ –¥–Ω—ë–º!")

		return

	# –°–æ—Ö—Ä–∞–Ω–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
	if not "LessonInfo" in bot_data:
		bot_data.update({
			"LessonInfo": {}
		})

	tasks = []
	for day in full_schedule["days"]:
		for lesson in full_schedule["days"][day]["schedule"]:
			if lesson["scheduleId"] not in bot_data["LessonInfo"]:
				tasks.append(asyncio.ensure_future(_downloadMoreInfo(user_data["Token"], lesson["scheduleId"], lesson)))

	if len(tasks) > 0:
		notification_msg = await msg.answer(f"<i>–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å —è –∑–∞–≥—Ä—É–∂–∞—é –≤—Å–µ <b>{len(tasks)}</b> —É—Ä–æ–∫–æ–≤ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é, –∞ —Ç–∞–∫ –∂–µ –∑–∞–Ω–∏–º–∞—é—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ —É—Ä–æ–∫–æ–≤ –≤ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥...</i>")

		all_lessons_downloaded = await asyncio.gather(*tasks)
		for lesson_downloaded in all_lessons_downloaded:
			bot_data["LessonInfo"].update({
				lesson_downloaded["scheduleId"]: lesson_downloaded
			})

		await notification_msg.delete()

	

	save_data(bot_data, f"Bot.json")
	day_schedule 				= full_schedule["days"][schedule_date]
	sched_str, sched_keyboard 	= await generate_autoschedule_string(msg, full_schedule, schedule_date, dateWasGiven, user_data["Token"])

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å —É—Ä–æ–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
	if len(day_schedule["schedule"]) == 0:
		await msg.answer_video("BAACAgIAAxkBAAIIPmHrijfK_J-iksoe4ebNUkPl1jzzAALIEgACeJ5ZS9mS95ZUO8wAASME") # ;)
		return

	if day_schedule["isDisabledWeek"]:
		await msg.answer(f"üòî –£–≤—ã, –Ω–æ –¥–∞—Ç–∞ <code>{schedule_date}</code> –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–∞–º–æ–º Bilimland, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
		return

	# –ó–∞–≥—Ä—É–∑–∏–º —É—Ä–æ–∫–∏ –≤ —Ñ–æ–Ω–µ:
	executor.asyncio.create_task(download_all_lesson_answers(day_schedule, True, user_data["Token"]))

	await msg.answer(
		f"<b><u>–ë–ï–¢–ê –í–ï–†–°–ò–Ø</u></b> ‚ö†Ô∏è üöß\n\nüìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {'—É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–æ–±–æ–π –¥–∞—Ç—É' if dateWasGiven else '—Å–µ–≥–æ–¥–Ω—è'}, <code>{schedule_date}</code>. {'–í —ç—Ç—É –¥–∞—Ç—É —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è' if dateWasGiven else '–£ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è'} {int_to_emojis(len(day_schedule['schedule']))} —É—Ä–æ–∫–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö:\n{sched_str}\n<code>{'„Ö§' * 30}</code>",
		reply_markup=sched_keyboard
	)

@dp.message_handler(commands=["aschedule_i_accept_the_fact_that_something_may_go_wrong"])
async def aschedule_accept(msg: types.Message):
	user_data = load_data(f"User-{msg.from_user.id}.json")
	male = user_data["Male"]

	timestamp: int  = user_data.get("AScheduleCommandUsedTimestamp")

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ.
	if (unix_time() - timestamp <= 50):
		await msg.answer(f"–ë–æ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ —Ç—ã —á–∏—Ç–∞–µ—à—å. –ê –Ω—É, –±–µ–≥–∏ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –±—É–¥–µ—Ç –≤–∏–Ω–æ–≤–∞—Ç –≤ —Ç–æ–º, —á—Ç–æ —Ç—ã –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª{'' if male else '–∞'}!")
		return


	user_data.update({"AutoLessonCompletionAgreement": True})
	save_data(user_data, f"User-{msg.from_user.id}.json")

	await msg.answer(f"–ü—Ä–∏–Ω—è—Ç–æ. –§–∞–∫—Ç, —á—Ç–æ —Ç—ã {'—Å–æ–≥–ª–∞—Å–∏–ª—Å—è' if male else '—Å–æ–≥–ª–∞—Å–∏–ª–∞—Å—å'}, –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –∏ —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π: /aschedule")

@dp.message_handler(commands = ["sched", "schedule", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–∑–∞–¥–∞–Ω–∏—è", "—Å–ø–∏—Å–æ–∫", "—É—Ä–æ–∫–∏"])
async def schedule_handler(msg: types.Message):
	user_data = load_data(f"User-{msg.from_user.id}.json")

	schedule_date = today_date()
	arguments = msg.get_args().split(" ")
	dateWasGiven = False
	if len(arguments) == 1 and arguments[0] != "":
		try:
			schedule_date_dt = datetime.datetime.strptime(arguments[0], "%d.%m.%y")
			schedule_date = schedule_date_dt.strftime("%d.%m.%Y") # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º "1.2.33" –≤ "1.2.3333"
			dateWasGiven = True
		except ValueError:
			await msg.answer(f"<i>–£–ø—Å</i>, —Ç—ã {'–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª' if user_data['Male'] else '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞'} –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã üëÄ.\n\n‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: <code>–¥–¥.–º–º.–≥–≥</code>.\n–ü—Ä–∏–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã: <code>{today_date()}</code>.")
			return

	try:
		full_schedule = await _BL.get_schedule(
			user_data, user_data["Token"], schedule_date)
	except:
		await msg.answer_sticker("CAACAgEAAxkBAAEDEzthZ-PBNrIKxd1YItQmcTItwNi1VwACcIMAAq8ZYgfAbLJhK3qxuiEE")

		await msg.answer("<i>–£–ø—Å</i>, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–º–∞–ª–∞—Å—å üò®\n\n–ü–æ–ø—Ä–æ–±—É–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –≤–µ–¥—å —è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–µ-–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª —Ç–µ–±—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É <code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>.\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, —Ç–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /feedback.")
		del user_data["Token"]
		save_data(user_data, f"User-{msg.from_user.id}.json")

		return

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
	if schedule_date not in full_schedule["days"]:
		await msg.answer(f"<i>–£–ø—Å!</i> {'–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —è' if dateWasGiven else '–Ø'} —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–æ–π, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. {'–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑ –∑–∞ –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤–≤—ë–ª<i>(-–∞)</i>, –ª–∏–±–æ –∂–µ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑-–∑–∞ –±–∞–≥–∞, —á—Ç–æ' if dateWasGiven else '–≠—Ç–æ—Ç –±–∞–≥'} –º–Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ. –ê —Å–µ–π—á–∞—Å, —Ç—ã –º–æ–∂–µ—à—å –ª–∏—à—å –ø–æ–¥–æ–∂–¥–∞—Ç—å <code>00:00</code>, –∞ –µ—â—ë –±—É–¥–µ—Ç –ª—É—á—à–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞ –¥–Ω—ë–º!")

		return

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å —É—Ä–æ–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
	if len(full_schedule["days"][schedule_date]["schedule"]) == 0:
		await msg.answer_video("BAACAgIAAxkBAAIIPmHrijfK_J-iksoe4ebNUkPl1jzzAALIEgACeJ5ZS9mS95ZUO8wAASME") # ;)

		return

	# –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–∫–ª—é—á–µ–Ω –ª–∏ —É—Ä–æ–∫?
	if full_schedule["days"][schedule_date]["isDisabledWeek"]:
		await msg.answer(f"üòî –£–≤—ã, –Ω–æ –¥–∞—Ç–∞ <code>{schedule_date}</code> –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–∞–º–æ–º Bilimland, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

		return

	day_schedule 				= full_schedule["days"][schedule_date]
	sched_str, sched_keyboard 	= await generate_schedule_string(msg, full_schedule, schedule_date, dateWasGiven, user_data["Token"], True)

	await msg.answer(
		f"üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {'—É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–æ–±–æ–π –¥–∞—Ç—É' if dateWasGiven else '—Å–µ–≥–æ–¥–Ω—è'}, <code>{schedule_date}</code>. {'–í —ç—Ç—É –¥–∞—Ç—É —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è' if dateWasGiven else '–£ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è'} {int_to_emojis(len(day_schedule['schedule']))} —É—Ä–æ–∫–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö:\n{sched_str}\n<code>{'„Ö§' * 30}</code>\n–ö–ª–∏–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∞–π—Ç–∞ —Å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º —É—Ä–æ–∫–æ–º! üòú\n–ù–∞–∂–∞–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –≤—ã—à–µ, —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –æ—Ç–∫—Ä—ã—Ç—å Bilimland —Å —ç—Ç–∏–º —É—Ä–æ–∫–æ–º. –í–∞—É, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏<a href=\"https://www.youtube.com/watch?v=Fqyes1_IJ1c\">! üò±</a>\n–¢–∞–∫ –∂–µ, —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π <code>/schedule –¥–¥.–º–º.–≥–≥</code>, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É. üëÄ",
		reply_markup=sched_keyboard
	)

async def generate_schedule_string(msg: types.Message, full_schedule: dict, schedule_date: str, date_was_chosen_by_user: bool = False, user_access_token: None | str = None, smaller_version: bool = True) -> Tuple[str, types.InlineKeyboardMarkup]:
	keys = []
	todays_schedule = full_schedule["days"][schedule_date]
	lessons_list = ""
	keyboard = InlineKeyboardMarkup(row_width = 4)
	user_data = load_data(f"User-{msg.from_user.id}.json")
	bot_data = load_data(f"Bot.json")
	notification_msg = None

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–∫–∞—á–∞–Ω–Ω—ã–π —É—Ä–æ–∫:
	non_downloaded_lessons = [i for i in todays_schedule["schedule"] if i["scheduleId"] not in bot_data["DecodedLessonURLs"]]
	if non_downloaded_lessons:
		bot_data["WeeksAnalyzed"] += 1

		notification_msg = await msg.answer(f"<i>–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å —è –∑–∞–≥—Ä—É–∂–∞—é –≤—Å–µ <b>{len(non_downloaded_lessons)}</b> —É—Ä–æ–∫–æ–≤ –≤ {'—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —Ç–æ—Ç –¥–µ–Ω—å, —á—Ç–æ –±—ã–ª —É–∫–∞–∑–∞–Ω –º–Ω–µ' if date_was_chosen_by_user else '—Ç–≤–æ—ë–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏'}, –∞ —Ç–∞–∫ –∂–µ –∑–∞–Ω–∏–º–∞—é—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏—Ö –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-20 —Å–µ–∫—É–Ω–¥...</i>")

	for index, lesson in enumerate(todays_schedule["schedule"]):
		if index > 0:
			lessons_list += ";\n"

		score = lesson['lesson']['score'] or 0
		score = round((score / 10) * 100)

		lesson_name = smaller_lesson_names.get(
			lesson['subject']['label'], lesson['subject']['label'])
		lesson_name_full = lesson['subject']['label']

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ URL –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —É—Ä–æ–∫—É.
		if lesson["scheduleId"] not in bot_data["DecodedLessonURLs"]:
			# URL –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É –Ω–µ—Ç—É, –∑–∞–∫–∞—á–∏–≤–∞–µ–º.

			# –ü–æ–ª—É—á–∞–µ–º LessonID
			lesson_info = await BL.get_lesson_info(user_data, user_data["Token"], lesson["scheduleId"])

			# –ü–æ–ª—É—á–∞–µ–º index.json
			index_json_url: Any = await BL.get_lesson_answers_link(
				lesson_info["data"]["lessonId"]
			)

			lesson_downloaded: str = ""
			access = await BL.get_lesson_access(user_data, user_data["Token"], lesson_info["data"]["lessonId"])
			lesson_downloaded = await BL.get_lesson_answers_file(index_json_url, access["data"]["jwt"])

			retries = 3
			lesson_decoded_url = None
			while retries > 0:
				try:
					# –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
					lesson_decoded_url = await _BL.decode_url(lesson_downloaded, lesson["scheduleId"])

					# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç—É –ª–∏ –æ—à–∏–±–∫–∏:
					if "Something went wrong :-(" in lesson_decoded_url:
						raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–∞, –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, —Å–µ—Ä–≤–µ—Ä –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ —É–ø–∞–ª.")
					
					break

				except:
					if retries <= 0:
						break

					await msg.answer(f"<i>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —è –Ω–µ —Å—É–º–µ–ª —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤. –Ø –ø–æ–ø—Ä–æ–±—É—é –µ—â—ë {retries} —Ä–∞–∑, –Ω–æ —Å –±–æ–ª—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π. –ï—Å–ª–∏ —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —Ç–æ —è –ø—Ä–æ–ø—É—â—É —É—Ä–æ–∫, –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞.</i>")
					await asyncio.sleep(5)
				finally:
					retries -= 1

			if lesson_decoded_url is None:
				await msg.answer("–°–∞–π—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏ —É–ø–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∂–µ.")
				raise Exception("–°–∞–π—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏ —É–ø–∞–ª.")

					

			# –°–æ—Ö—Ä–∞–Ω—è–µ–º URL
			bot_data["DecodedLessonURLs"][lesson["scheduleId"]] = lesson_decoded_url

			# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
			bot_data["LessonsAnalyzed"] += 1

		decoded_url = bot_data["DecodedLessonURLs"][lesson["scheduleId"]]
		broken_url = "Something went wrong :-(" in decoded_url

		if broken_url:
			# –ù–∞ –≤—Å—è–∫–∏–π.
			decoded_url = "www.error.com"

		if smaller_version:
			# –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
			lessons_list += f" ‚Ä¢ {'‚úÖ' if score else ' ' * 6} <b>[{index + 1}]</b> <a href=\"https://onlinemektep.net/schedule/{schedule_date}/lesson/{lesson['scheduleId']}\">{lesson_name_full}</a>: {score}%"

			if not broken_url:
				keys.append(InlineKeyboardButton(
					f"[{index + 1}] {lesson_name}", url=decoded_url))
		else:
			# PC-–í–µ—Ä—Å–∏—è
			lessons_list += f" ‚Ä¢ {'‚úÖ' if score else ' ' * 6} <b>[{index + 1}]</b>: {lesson['subject']['label']}, <i>¬´{shorten(lesson['theme']['label'], 40, placeholder = '...')}¬ª</i>: {score}%"
			
			if not broken_url:
				keys.append(InlineKeyboardButton(
					f"{lesson['subject']['label']}, ¬´{lesson['theme']['label']}¬ª", url=decoded_url))

		if broken_url:
			keys.append(InlineKeyboardButton(
				f"[{index + 1}] –û–®–ò–ë–ö–ê", callback_data="error-button"))

			# –£–¥–∞–ª—è–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–π URL:
			del bot_data["DecodedLessonURLs"][lesson["scheduleId"]]

			

		

	lessons_list += "."

	keyboard.add(*keys)
	# keyboard.add(InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏", callback_data = "a"))
	save_data(user_data, f"User-{msg.from_user.id}.json")
	save_data(bot_data, "Bot.json")
	if notification_msg is not None:
		await notification_msg.delete()

	return lessons_list, keyboard

async def download_all_lesson_answers(schedule: dict, use_lesson_access, token: str):
	return

	async def _download(lesson_id: int, scheduleID: str, use_lesson_access: bool):
		url = await BL.get_lesson_answers_link(lesson_id)
		indexjson_encrypted = None
		if use_lesson_access:
			access_response = await BL.get_lesson_access(token, lesson_id)
			indexjson_encrypted = await BL.get_lesson_answers_file(url, access_response["data"]["jwt"])
		else:
			indexjson_encrypted = await BL.get_lesson_answers_file(url)

		# –ó–∞–≥—Ä—É–∑–∏–º —Ñ–∞–π–ª –Ω–∞ –º–æ–π —Å–∞–π—Ç.
		lesson_decoded_url = await _BL.decode_url(indexjson_encrypted, lesson["scheduleId"])

		# –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º, –ø–∞—Ä—Å–∏–º.
		decoded = await BL.decode_lesson_answers_file(indexjson_encrypted)
		parsed = await BL.parse_lesson_answers(decoded)

		return json.dumps(parsed, ensure_ascii=False, sort_keys=True, indent=4)

	tasks = []

	for lesson in schedule["schedule"]:
		tasks.append(asyncio.ensure_future(_download(lesson["calendarPlanLesson"]["entityId"], lesson["scheduleId"], use_lesson_access)))

	all_lessons_downloaded = await asyncio.gather(*tasks)

	for index, lesson in enumerate(all_lessons_downloaded):
		filepath = f"Data/Index-{schedule['schedule'][index]['scheduleId']}.jsonc"
		if not os.path.exists(filepath):
			open(filepath, "w", encoding="utf-8").write(lesson)

async def generate_autoschedule_string(msg: types.Message, full_schedule: dict, schedule_date: str, date_was_chosen_by_user: bool = False, user_access_token: str = None) -> Tuple[str, types.InlineKeyboardMarkup]:
	keys = []
	todays_schedule = full_schedule["days"][schedule_date]
	lessons_list = ""
	keyboard = InlineKeyboardMarkup(row_width = 4)
	# user_data = load_data(f"User-{msg.from_user.id}.json")
	# bot_data = load_data(f"Bot.json")
	notification_msg = None

	for index, lesson in enumerate(todays_schedule["schedule"]):
		lessonScheduleID = lesson["scheduleId"]

		if index > 0:
			lessons_list += ";\n"

		score = lesson['lesson']['score'] or 0
		score = round((score / 10) * 100)

		lesson_name = smaller_lesson_names.get(
			lesson['subject']['label'], lesson['subject']['label'])
		lesson_name_full = lesson['subject']['label']

		lessons_list += f" ‚Ä¢ {'‚úÖ' if score else ' ' * 6} <b>[{index + 1}]</b> <a href=\"https://onlinemektep.net/schedule/{schedule_date}/lesson/{lessonScheduleID}\">{lesson_name_full}</a>: {score}%"

		keys.append(InlineKeyboardButton(
			f"[{index + 1}] {lesson_name}", callback_data=f"openlesson!{lessonScheduleID}"))
		

	lessons_list += "."

	keyboard.add(*keys)
	# save_data(user_data, f"User-{msg.from_user.id}.json")
	# save_data(bot_data, "Bot.json")
	if notification_msg is not None:
		await notification_msg.delete()

	return lessons_list, keyboard

@dp.message_handler(commands=["contact", "feedback", "—Ñ–∏–¥–±—ç–∫", "—Ñ–∏–¥–±–µ–∫", "–æ—Ç–∑—ã–≤"])
async def feedback(msg: types.Message):
	user_data = load_data(f"User-{msg.from_user.id}.json")
	male = user_data.get("Male", True)

	await msg.answer(f"–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–æ–∂–Ω–æ, –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –Ω–∞–ø—Ä—è–º—É—é: @Zensonaton.\n\n–ï—Å–ª–∏ —Ç—ã —Å—Ç–æ–ª–∫–Ω—É–ª{'—Å—è' if male else '–∞—Å—å'} —Å –ø—Ä–æ–±–ª–µ–º–æ–π, —Ç–æ –ø–µ—Ä–µ—à–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–ª–µ–¥—É—é—â–µ–º—É ID: <span class=\"tg-spoiler\">{msg.from_user.id}</span>")

@dp.errors_handler()
async def global_error_handler(update: Update, error: Exception):

	if isinstance(error, FileNotFoundError):
		await update.message.answer("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç Bilimland:\n\n<code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>")
		return True

	logger.exception(error)

	await update.message.answer(f"–£–ø—Å, —É –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n\n<code>{traceback.format_exc()}</code>")
	return True

@dp.callback_query_handler(lambda call: call.data == "error-button")
async def callback_schedule_error_button(query: types.CallbackQuery):
	await bot.answer_callback_query(query.id, text="‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —ç—Ç–æ—Ç —É—Ä–æ–∫ —Å–ª–æ–º–∞–ª—Å—è.\n\n‚ÑπÔ∏è –ü—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /schedule —Å–Ω–æ–≤–∞, —á—Ç–æ –±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É –æ—à–∏–±–∫—É.", show_alert=True)

@dp.callback_query_handler(lambda call: call.data.startswith("openlesson!"))
async def callback_asched_lesson(query: types.CallbackQuery):
	bot_data = load_data("Bot.json")
	lessonScheduleID = query.data.split("!")[1]
	lessonInfo = bot_data["LessonInfo"][lessonScheduleID]

	keyboard = InlineKeyboardMarkup(row_width = 1)
	keys = []

	keys.append(InlineKeyboardButton(
		"WIP –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"lessonwork!{lessonScheduleID}"))
	keys.append(InlineKeyboardButton(
		"–û—Ç–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã", url=f"https://bilimlandbot.eu.pythonanywhere.com/f/?f={lessonScheduleID}.html"))
	keys.append(InlineKeyboardButton(
		"–ó–∞–≥—Ä—É–∑–∏—Ç—å index.json", callback_data=f"indexjson!{lessonScheduleID}"))

	keyboard.add(*keys)

	await bot.send_message(query.message.chat.id, f"‚úîÔ∏è –û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å —É—Ä–æ–∫–æ–º <i>¬´{lessonInfo['subject']['label']}¬ª:</i>", reply_markup=keyboard)
	
	await bot.answer_callback_query(query.id)

@dp.callback_query_handler(lambda call: call.data.startswith("lessonwork!"))
async def callback_lessonwork(query: types.CallbackQuery):
	return

	await bot.answer_callback_query(query.id, text="–ü—ã—Ç–∞—é—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏.")

	lessonId = query.data.split("!")[1]
	bot_data = load_data("Bot.json")
	user_info = load_data(f"User-{query.from_user.id}.json")
	lessonInfo = bot_data["LessonInfo"][lessonId]
	lessonAnswers = json.load(open(f"Data/Index-{lessonId}.jsonc", "r", encoding="utf-8"))

	lesson_state = {}
	try:
		try:
			lesson_state_finished = await BL.get_lesson_state(lessonInfo["lessonId"], user_info["BilimlandID"], for_finished_lesson=True)
			if lesson_state_finished.get("isFinished") == 1:
				await query.message.answer("–≠—Ç–æ—Ç —É—Ä–æ–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
				return
		except:
			pass

		# –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
		lesson_state = await BL.get_lesson_state(lessonInfo["lessonId"], user_info["BilimlandID"])

	except BL.LessonIsEmpty:
		# –ï—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∞–µ–º —ç—Ç—É –æ—à–∏–±–∫—É, —Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, —É—Ä–æ–∫ –ø—É—Å—Ç, –∏ –º—ã –¥–æ–ª–∂–Ω—ã —Å–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.

		# –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.
		new_lesson_data = await BL.generate_lesson_state_post_content(lessonAnswers, lessonInfo, user_info)

		# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç. –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ –∫–æ–Ω—Å–ø–µ–∫—Ç, –∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —É—Ä–æ–∫, –æ–¥–Ω–∞–∫–æ, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ –∫–æ–Ω—Å–ø–µ–∫—Ç.
		new_lesson_state_data = await BL.add_answer_to_state(new_lesson_data, lessonAnswers)

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Bilimland, —á—Ç–æ –±—ã –æ–Ω –∏—Ö —Å–æ—Ö—Ä–∞–Ω–∏–ª.
		lesson_state_change_response = await BL.send_lesson_new_state(user_info["Token"], new_lesson_state_data, lessonInfo["lessonId"], user_info["BilimlandID"], True)

		lesson_state = new_lesson_data

	# –û—Ç–ª–∏—á–Ω–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ä–æ–∫–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.

	try:
		for i in range(len(lessonAnswers["moduleIDsOrdered"]) - 1):
			# –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ 9 —É—Ä–æ–∫–æ–≤. // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –±–æ—Ç –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Ä–æ–∫–∏.

			# –î–æ–±–∞–≤–ª—è–µ–º 1 –æ—Ç–≤–µ—Ç.
			lesson_state = await BL.add_answer_to_state(lesson_state, lessonAnswers)

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Bilimland, —á—Ç–æ –±—ã –æ–Ω –∏—Ö —Å–æ—Ö—Ä–∞–Ω–∏–ª.
			lesson_new_state_response = await BL.send_lesson_new_state(user_info["Token"], lesson_state, lessonInfo["lessonId"], user_info["BilimlandID"], ignore_duplicate=True)
	except:
		pass
		# –í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, –≤—Å—ë –æ–∫, —Ç–∞–∫ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å.

	final_lesson_state = await BL.mark_lesson_state_as_complete(lesson_state)

	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Bilimland, —á—Ç–æ –±—ã –æ–Ω –∏—Ö —Å–æ—Ö—Ä–∞–Ω–∏–ª.
	lesson_new_state_response = await BL.send_lesson_new_state(user_info["Token"], final_lesson_state, lessonInfo["lessonId"], user_info["BilimlandID"], ignore_duplicate=True)
		

	await query.message.answer("<i>–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω, –æ–¥–Ω–∞–∫–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â—ë –≤ –±–µ—Ç–µ, —á—Ç–æ-—Ç–æ –º–æ–≥–ª–æ –ø–æ–ª–æ–º–∞—Ç—å—Å—è, –∏, –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –±–æ—Ç –º–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ –∑–∞–¥–∞–Ω–∏–∏ –ª–∏–±–æ –≤–æ–æ–±—â–µ –∑–∞–±–∏—Ç—å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∏–ª–∏ –≤–æ–æ–±—â–µ —Å–ª–æ–º–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ.</i>")
	
@dp.callback_query_handler(lambda call: call.data.startswith("indexjson!"))
async def callback_indexjsondownload(query: types.CallbackQuery):
	lessonScheduleID = query.data.split("!")[1]

	await bot.send_document(
		query.message.chat.id, 
		types.InputFile(f"Data/Index-{lessonScheduleID}.jsonc", filename=f"index-{lessonScheduleID}.json"),
		caption="–î–µ—Ä–∂–∏. –≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ <code>index.json</code> —Ñ–∞–π–ª–∞.",
	)
	
	await bot.answer_callback_query(query.id)



# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.
if __name__ == "__main__":
	logger.info("–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞...")

	if not os.path.exists("Data/Bot.json"):
		save_data({
			"DecodedLessonURLs": {},
			"StartTimestamp": datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
			"WeeksAnalyzed": 0,
			"LessonsAnalyzed": 0,
			"UniqueUsers": 0,
			"TokensGotRefreshed": 0
		}, "Bot.json")

	executor.start_polling(dp, on_startup=logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"))
