# coding: utf-8

import 	json
from 	typing import Any, Tuple
from    aiogram             import 	Bot, types, md
from    aiogram.dispatcher  import 	Dispatcher
from    aiogram.utils       import 	executor, markdown
from 	aiogram.types 		import 	ReplyKeyboardRemove, \
									ReplyKeyboardMarkup, KeyboardButton, \
									InlineKeyboardMarkup, InlineKeyboardButton, Update, MediaGroup, InputFile, InputMedia
import 	aiohttp
from    dotenv              import 	load_dotenv
import 	BL_Utils			as _BL
import 	BL_AutoParser		as BL	
from 	Utils 				import 	convert_datetime_to_string, int_to_emojis, load_data, parse_date_as_string, random_uuid, save_data, seconds_to_userfriendly_string, today_date, today_date_as_local_string, today_date_small_year, unix_time
from 	textwrap 			import 	shorten
import 	Screenshoter
import 	traceback
import 	datetime
import 	logging
import 	asyncio
import 	time
import 	sys
import 	os

# –ú–µ–Ω—è–µ–º Timezone:
os.environ["TZ"] = "Asia/Almaty"
time.tzset()

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª.
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
bot = Bot(
	token       = os.environ["TG_TOKEN"],
	parse_mode  = types.ParseMode.HTML
)

PROD = (os.getenv("PRODUCTION", "false").lower() == "true")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥.
dp = Dispatcher(bot)

if not os.path.exists("./Logs/"):
	os.mkdir("./Logs/")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
logger = logging.getLogger(__name__)
streamHandler = logging.StreamHandler()
streamHandler.setFormatter(logging.Formatter("[%(levelname)-8s %(asctime)s at %(name)s.%(funcName)s]: %(message)s", "%d.%d.%Y %H:%M:%S"))
streamHandler.setLevel(logging.DEBUG)
logger.addHandler(streamHandler)
fileHandler = logging.FileHandler("Logs/TGBot.log")
fileHandler.setFormatter(logging.Formatter("[%(levelname)-8s %(asctime)s at %(name)s.%(funcName)s]: %(message)s", "%d.%d.%Y %H:%M:%S"))
fileHandler.setLevel(logging.DEBUG)
logger.addHandler(fileHandler)

# –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫:
smaller_lesson_names = {
	"–ê–ª–≥–µ–±—Ä–∞ –∏ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞": "–ê–ª–≥–µ–±—Ä–∞",
	"–†—É—Å—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–†—É—Å. –ª–∏—Ç.",
	"–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫": "–ê–Ω–≥–ª. —è–∑.",
	"–ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–ö–∞–∑. —è–∑/–ª–∏—Ç.",
	"–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (5-11 –∫–ª–∞—Å—Å—ã)": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
	"–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞": "–§–∏–∑/—Ä–∞",
	"–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑.",
	"–û—Å–Ω–æ–≤—ã –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –±–∏–∑–Ω–µ—Å–∞": "–û—Å–Ω. –±–∏–∑–Ω–µ—Å–∞",
}

UPTIME = unix_time()
WHITELIST = [str(i) for i in load_data("Whitelist.json")]

# Whitelist
@dp.message_handler(lambda msg: not (str(msg.from_user.id) in WHITELIST or msg.from_user.username in WHITELIST))
async def non_whitelisted_handler(msg: types.Message):
	if not msg.is_command():
		return
	full_user_name = f"{msg.from_user.first_name} {msg.from_user.last_name}"

	logger.info(f"–°—Ç—É—á–∏—Ç—Å—è —é–∑–µ—Ä '{full_user_name}' —Å ID: {msg.from_user.id}, –Ω–∏–∫–Ω–µ–π–º–æ–º: {msg.from_user.username}")
	await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
	await bot.send_message(os.environ["ADMIN_TELEGRAM_ID"], f"üóí –ù–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ: <code>{full_user_name}</code>, —Å ID: <code>{msg.from_user.id}</code>, –Ω–∏–∫–Ω–µ–π–º–æ–º: <code>{msg.from_user.username}</code>.\n–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: <code>/add {msg.from_user.username or msg.from_user.id}</code>", disable_notification=True)

@dp.message_handler(lambda msg: str(msg.from_user.id) == os.environ["ADMIN_TELEGRAM_ID"], commands = ["add"])
async def add_to_whitelist_handler(msg: types.Message):
	global WHITELIST

	old_list = load_data("Whitelist.json")
	arguments = msg.get_args().split(" ")
	if len(arguments) != 1 or arguments[0] == "":
		await msg.answer(f"<code>/add username</code> –∏–ª–∏ <code>/add telegram_user_id</code>")
		
		return

	if not arguments[0] in old_list:
		old_list.append(arguments[0])
		save_data(old_list, "Whitelist.json")
		WHITELIST = old_list

	await msg.answer(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª.\n–ù–æ–≤—ã–π –ª–∏—Å—Ç: {', '.join([('<code>' + str(i) + '</code>') for i in old_list])}.")

@dp.message_handler(commands = ["start", "start", "—Å—Ç–∞—Ä—Ç"])
async def message_handler(msg: types.Message):
	#–£ –±–æ—Ç–∞ –µ—Å—Ç—å <a href='https://github.com/Zensonaton/ZensonatonTools_TGBot'>–æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥</a>, –ø–æ—ç—Ç–æ–º—É —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç '–∑–∞ –∫—É–ª–∏—Å–∞–º–∏'.
	await msg.answer(
		"<b>–ü—Ä–∏–≤–µ—Ç!</b> üëã\n–î–∞–Ω–Ω—ã–π –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –æ—Ç Bilimland –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∏–Ω–∞ + –ø–∞—Ä–æ–ª—è. <i>(–æ–¥–Ω–∞–∫–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –°–û–†–∞–º–∏ –∏–ª–∏ –°–û–ß–∞–º–∏.)</i>\n\n–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —è —Å–æ–≤–µ—Ç—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É <code>/help</code>, –æ–¥–Ω–∞–∫–æ —Ç—ã –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É <code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code> –≤ –¥–µ–π—Å—Ç–≤–∏–∏."
	)

@dp.message_handler(commands=["help", "–∫–æ–º–∞–Ω–¥—ã", "–ø–æ–º–æ—â—å", "info", "–∏–Ω—Ñ–æ"])
async def help(msg: types.Message):
	await msg.answer(
		f"‚ÑπÔ∏è <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —É –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞</b>:\n\n/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å ‚Äî –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç Bilimland.\n/schedule ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ –≤ Bilimland, –∞ —Ç–∞–∫ –∂–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–≤–µ—Ç—ã. –¢–∞–∫ –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: <code>/schedule –¥–¥.–º–º.–≥–≥</code>. <i>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.</i>\n/feedback ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É –±–æ—Ç–∞ –≤ —Å–ª—É—á–∞–µ, –∫ –ø—Ä–∏–º–µ—Ä—É, –±–∞–≥–∞.\n/stats ‚Äî —Ä–∞–∑–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞.\n/logout ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Bilimland, –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–æ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.\n\nüêõüî´ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —É –±–æ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö:\n<b>1</b>. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ 23:00 - 00:00.\n–í—Å–µ —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã –±—É–¥—É—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n<span class=\"tg-spoiler\">üöß –§—É–Ω–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π <b>–±–æ—Ç, —Å–∞–º, –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ</b>, –±—É–¥–µ—Ç —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —É–∂–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞!</span>"
	)

@dp.message_handler(commands=["stats", "stat", "—Å—Ç–∞—Ç—ã", "statistics", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
async def stats(msg: types.Message):
	bot_data = load_data("Bot.json")

	startDate = datetime.datetime.strptime(bot_data['StartTimestamp'], '%d.%m.%Y %H:%M:%S')

	await msg.answer(
		f"–ó–∞ <b>{(datetime.datetime.now() - startDate).days}</b> –¥–Ω–µ–π —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã, <i>(–ø–µ—Ä–∏–æ–¥ —Å <b>{startDate}</b> –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)</i> –±–æ—Ç —Å—É–º–µ–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å <b>{bot_data['WeeksAnalyzed']}</b> —É—á–µ–±–Ω—ã—Ö –Ω–µ–¥–µ–ª—å, —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ ‚Äî <b>{bot_data['LessonsAnalyzed']}</b>. –ê–∫—Ç–∏–≤–Ω—ã—Ö <s>—Å–ø–∏—Å—ã–≤–∞—é—â–∏—Ö</s> –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö —Å–µ–±—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –±–æ—Ç–∞ ‚Äî <b>{bot_data['UniqueUsers']}</b>, —Å–µ—Å—Å–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ <i>(—Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–≤—ã–ø—É—â–µ–Ω–æ)</i>: <b>{bot_data['TokensGotRefreshed']}</b>. Uptime –±–æ—Ç–∞: <b>{seconds_to_userfriendly_string(unix_time() - UPTIME, weeks=True, months=True)}</b>. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {'–Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ' if PROD else '<b><u>–ª–æ–∫–∞–ª—å–Ω–æ</u></b>'}."
	)

@dp.message_handler(commands = ["login", "–ª–æ–≥–∏–Ω"])
async def login_handler(msg: types.Message):
	arguments = msg.get_args().split(" ") # pyright: reportOptionalMemberAccess=false

	if len(arguments) != 2:
		await msg.answer("–î–ª—è –≤—Ö–æ–¥–∞ –Ω—É–∂–µ–Ω –ª–æ–≥–∏–Ω <b>–∏</b> –ø–∞—Ä–æ–ª—å.\n\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: <code>/login alexey_victor 123456</code>")
		return

	# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∏.
	await msg.delete()

	await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —è –ø–æ–ø—Ä–æ–±—É—é –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π. üôÉüëç\n\n<i>(–ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö.)</i> üëÄ")
	greet_sticker = await msg.answer_sticker("CAACAgEAAxkBAAEDEzlhZ-J2G8SuIVt0ahDnsHMAAbt-jfwAAudrAAKvGWIHhIr-D4PhzQQhBA")

	# –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.
	login_result = await _BL.login(arguments[0], arguments[1], msg.from_user.id, True)

	# –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, login_result –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ç—Ä–∏–±—É—Ç–µ "message".
	if "message" in login_result:
		# –£–¥–∞–ª—è–µ–º —Ä–∞–¥–æ—Å—Ç–Ω—ã–π —Å—Ç–∏–∫–µ—Ä.
		await greet_sticker.delete()

		await msg.answer_sticker("CAACAgEAAxkBAAEDEzthZ-PBNrIKxd1YItQmcTItwNi1VwACcIMAAq8ZYgfAbLJhK3qxuiEE")

		if login_result["message"] == "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å":
			await msg.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: <b>–ü–∞—Ä–æ–ª—å –∏/–ª–∏ –ª–æ–≥–∏–Ω –Ω–µ –≤–µ—Ä–Ω—ã</b>. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!") 
		else:
			await msg.answer(f"–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —è –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ç–∞–∫–æ–π –æ—à–∏–±–∫–µ: <code>{login_result['message']}</code>.") 

		return

	await msg.answer(f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ø–∞—Ä–æ–ª—å –∏ –ª–æ–≥–∏–Ω –≤–µ—Ä–Ω—ã, –∏ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, <b><i>{login_result['FirstName']}!</i></b> üëç\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: /schedule")

@dp.message_handler(commands = ["logout", "logoff", "leave", "stop", "quit", "–≤—ã—Ö–æ–¥"])
async def logout_handler(msg: types.Message):
	# –ü–æ–ª—É—á–∏–º –ø–æ–ª —á–µ–ª–æ–≤–µ–∫–∞, –∏ –¥–∞–ª–µ–µ —É–¥–∞–ª–∏–º –¥–∞–Ω–Ω—ã–µ.
	user_data = load_data(f"User-{msg.from_user.id}.json")
	male = user_data.get("Male")

	if male is None:
		# –Æ–∑–µ—Ä –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.
		await msg.answer("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã —É–∂–µ –≤—ã—à–µ–ª<i>(-—à–ª–∞)</i> –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Bilimland.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>, —á—Ç–æ –±—ã –≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å–Ω–æ–≤–∞.")
		return 

	os.remove(f"Data/User-{msg.from_user.id}.json")

	await msg.answer_sticker("CAACAgEAAxkBAAEDueFh6rb-9Kfrru1hc5Xe9WeysajuugACpYMAAq8ZYgfsx0PGPxH8hCME")
	await msg.answer(f"–¢—ã —É—Å–ø–µ—à–Ω–æ {'–≤—ã—à–µ–ª' if male else '–≤—ã—à–ª–∞'} –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Bilimland, —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –ú–Ω–µ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –∂–∞–ª—å, —á—Ç–æ —Ç–∞–∫ –≤—ã—à–ª–æ. üòûüëã\n\n–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ-–æ—à–∏–±–∫–µ, —Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π <code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>, —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å –≤—Å—ë –Ω–∞–∑–∞–¥!")

@dp.message_handler(commands = ["sched", "schedule", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–∑–∞–¥–∞–Ω–∏—è", "—Å–ø–∏—Å–æ–∫", "—É—Ä–æ–∫–∏"])
async def schedule_handler(msg: types.Message):
	user_data = load_data(f"User-{msg.from_user.id}.json")

	schedule_date = today_date()
	arguments = msg.get_args().split(" ")
	dateWasGiven = False
	if len(arguments) == 1 and arguments[0] != "":
		try:
			schedule_date = convert_datetime_to_string(parse_date_as_string(arguments[0]))
			dateWasGiven = True
		except ValueError:
			await msg.answer(f"<i>–£–ø—Å</i>, —Ç—ã {'–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª' if user_data['Male'] else '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞'} –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. üëÄ\n\n‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: <code>–¥–¥.–º–º.–≥–≥</code>.\n–ü—Ä–∏–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã: <code>{today_date_small_year()}</code>.")
			
			return

	try:
		full_schedule = await _BL.get_schedule(
			user_data, user_data["Token"], schedule_date)
	except:
		await msg.answer_sticker("CAACAgEAAxkBAAEDEzthZ-PBNrIKxd1YItQmcTItwNi1VwACcIMAAq8ZYgfAbLJhK3qxuiEE")

		await msg.answer("<i>–£–ø—Å</i>, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–º–∞–ª–∞—Å—å üò®\n\n–ü–æ–ø—Ä–æ–±—É–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –≤–µ–¥—å —è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–µ-–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª —Ç–µ–±—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É <code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>.\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, —Ç–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /feedback.")
		del user_data["Token"]
		save_data(user_data, f"User-{msg.from_user.id}.json")

		return

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
	if schedule_date not in full_schedule["days"]:
		await msg.answer(f"<i>–£–ø—Å!</i> {'–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —è' if dateWasGiven else '–Ø'} —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–æ–π, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. {'–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑ –∑–∞ –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤–≤—ë–ª<i>(-–∞)</i>, –ª–∏–±–æ –∂–µ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑-–∑–∞ –±–∞–≥–∞, —á—Ç–æ' if dateWasGiven else '–≠—Ç–æ—Ç –±–∞–≥'} –º–Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ. –ê —Å–µ–π—á–∞—Å, —Ç—ã –º–æ–∂–µ—à—å –ª–∏—à—å –ø–æ–¥–æ–∂–¥–∞—Ç—å <code>00:00</code>, –∞ –µ—â—ë –±—É–¥–µ—Ç –ª—É—á—à–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞ –¥–Ω—ë–º!")

		return

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å —É—Ä–æ–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
	if len(full_schedule["days"][schedule_date]["schedule"]) == 0:
		await msg.answer_video("BAACAgIAAxkBAAIIPmHrijfK_J-iksoe4ebNUkPl1jzzAALIEgACeJ5ZS9mS95ZUO8wAASME") 
		# ;)

		return

	# –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–∫–ª—é—á–µ–Ω –ª–∏ —É—Ä–æ–∫?
	if full_schedule["days"][schedule_date]["isDisabledWeek"]:
		await msg.answer(f"üòî –£–≤—ã, –Ω–æ –¥–∞—Ç–∞ <code>{schedule_date}</code> –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–∞–º–æ–º Bilimland, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

		return

	day_schedule 				= full_schedule["days"][schedule_date]
	sched_str, sched_keyboard 	= await generate_schedule_string(msg, full_schedule, schedule_date, dateWasGiven, user_data["Token"], True)

	await msg.answer(
		f"üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {'—É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–æ–±–æ–π –¥–∞—Ç—É' if dateWasGiven else '—Å–µ–≥–æ–¥–Ω—è'}, <code>{schedule_date}</code>. {'–í —ç—Ç—É –¥–∞—Ç—É —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è' if dateWasGiven else '–£ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è'} {int_to_emojis(len(day_schedule['schedule']))} —É—Ä–æ–∫–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö:\n{sched_str}\n<code>{'„Ö§' * 30}</code>\n–ö–ª–∏–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∞–π—Ç–∞ —Å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º —É—Ä–æ–∫–æ–º! üòú\n–ù–∞–∂–∞–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –≤—ã—à–µ, —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –æ—Ç–∫—Ä—ã—Ç—å Bilimland —Å —ç—Ç–∏–º —É—Ä–æ–∫–æ–º. –í–∞—É, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏<a href=\"https://www.youtube.com/watch?v=Fqyes1_IJ1c\">! üò±</a>\n–¢–∞–∫ –∂–µ, —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π <code>/schedule –¥–¥.–º–º.–≥–≥</code>, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É. üëÄ",
		reply_markup=sched_keyboard,
		disable_web_page_preview=True
	)

@dp.message_handler(commands = ["debug", "test"])
async def debug_handler(msg: types.Message):
	# await msg.answer_photo("AgACAgIAAxkDAAOFYff7xTXsYpkIW3qrHvfa5cjlS5wAAiO4MRsGeMFLvs0GzDt8jJcBAAMCAANzAAMjBA")
	pass

@dp.message_handler(commands = ["screenshots", "screenshot", "ss", "—Å–∫—Ä–∏–Ω—à–æ—Ç—ã", "—Å–∫—Ä–∏–Ω—à–æ—Ç"])
async def screenshots_handler(msg: types.Message):
	user_data = load_data(f"User-{msg.from_user.id}.json")
	male = user_data["Male"]

	schedule_date = today_date()
	arguments = msg.get_args().split(" ")
	dateWasGiven = False
	if len(arguments) == 1 and arguments[0] != "":
		try:
			schedule_date = convert_datetime_to_string(parse_date_as_string(arguments[0]))
			dateWasGiven = True
		except ValueError:
			await msg.answer(f"<i>–£–ø—Å</i>, —Ç—ã {'–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª' if user_data['Male'] else '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞'} –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. üëÄ\n\n‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: <code>–¥–¥.–º–º.–≥–≥</code>.\n–ü—Ä–∏–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã: <code>{today_date_small_year()}</code>.")
			
			return

	try:
		full_schedule = await _BL.get_schedule(
			user_data, user_data["Token"], schedule_date)
	except:
		await msg.answer_sticker("CAACAgEAAxkBAAEDEzthZ-PBNrIKxd1YItQmcTItwNi1VwACcIMAAq8ZYgfAbLJhK3qxuiEE")

		await msg.answer("<i>–£–ø—Å</i>, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–º–∞–ª–∞—Å—å üò®\n\n–ü–æ–ø—Ä–æ–±—É–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –≤–µ–¥—å —è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–µ-–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª —Ç–µ–±—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É <code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>.\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, —Ç–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /feedback.")
		del user_data["Token"]
		save_data(user_data, f"User-{msg.from_user.id}.json")

		return

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
	if schedule_date not in full_schedule["days"]:
		await msg.answer(f"<i>–£–ø—Å!</i> {'–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —è' if dateWasGiven else '–Ø'} —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–æ–π, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. {'–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑ –∑–∞ –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤–≤—ë–ª<i>(-–∞)</i>, –ª–∏–±–æ –∂–µ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑-–∑–∞ –±–∞–≥–∞, —á—Ç–æ' if dateWasGiven else '–≠—Ç–æ—Ç –±–∞–≥'} –º–Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ. –ê —Å–µ–π—á–∞—Å, —Ç—ã –º–æ–∂–µ—à—å –ª–∏—à—å –ø–æ–¥–æ–∂–¥–∞—Ç—å <code>00:00</code>, –∞ –µ—â—ë –±—É–¥–µ—Ç –ª—É—á—à–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞ –¥–Ω—ë–º!")

		return

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å —É—Ä–æ–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
	if len(full_schedule["days"][schedule_date]["schedule"]) == 0:
		await msg.answer_video("BAACAgIAAxkBAAIIPmHrijfK_J-iksoe4ebNUkPl1jzzAALIEgACeJ5ZS9mS95ZUO8wAASME") 
		# ;)

		return

	# –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–∫–ª—é—á–µ–Ω –ª–∏ —É—Ä–æ–∫?
	if full_schedule["days"][schedule_date]["isDisabledWeek"]:
		await msg.answer(f"üòî –£–≤—ã, –Ω–æ –¥–∞—Ç–∞ <code>{schedule_date}</code> –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–∞–º–æ–º Bilimland, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

		return

	day_schedule = full_schedule["days"][schedule_date]
	completed_lessons = [i for i in day_schedule["schedule"] if i["lesson"]["score"] is not None]

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —É—Ä–æ–∫.
	if len(completed_lessons) == 0:
		await msg.answer(f"<i>–û–π!</i> –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª{'' if male else '–∞'} –Ω–∏ –æ–¥–∏–Ω —É—Ä–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. üëÄ\n–í—ã–ø–æ–ª–Ω–∏ —É—Ä–æ–∫–∏, –∏ –ø—Ä–æ–ø–∏—à–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞ —á—Ç–æ –±—ã —è —Å—É–º–µ–ª —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã!\n\nü§î –ï—Å–ª–∏ —Ç—ã –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –≤—ã–ø–æ–ª–Ω–∏–ª{'' if male else '–∞'} —Ä–∞–±–æ—Ç—É, –Ω–æ —è –¥–∞–ª—å—à–µ –±—É–¥—É —É–ø—Ä—è–º–∏—Ç—å—Å—è –∏ –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç–æ –ø–æ–¥–æ–∂–¥–∏ 5-10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã: –£–≤—ã, —É Bilimland'–∞ –µ—Å—Ç—å –±–∞–≥, –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –Ω–µ —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫–∏ –∑–∞ —É—Ä–æ–∫–∏ :(")

		return

	inform_message = await msg.answer(f"–û—Ç–ª–∏—á–Ω–æ, —è —É–≤–∏–¥–µ–ª –≤ —Ç–≤–æ—ë–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ {int_to_emojis(len(completed_lessons))} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤! üòå\n\n–ê —Ç–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã.\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏ –≤–ø—Ä–∞–≤–¥—É –¥–æ–ª–≥–∏–π, –∏ <b>–æ–Ω –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 40 —Å–µ–∫—É–Ω–¥ –¥–æ 2 –º–∏–Ω—É—Ç! –≠—Ç–æ –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å.</b> üòï")

	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä.
	driver = None
	lessons_count = {}

	try:
		TEMP_BROWSER_DIRECTORY = os.path.join(os.getcwd(), "temp-browser")
		driver = Screenshoter.setup_firefox_browser(user_data["Token"], user_data["Refresh-Token"], temp_dir=TEMP_BROWSER_DIRECTORY, headless=PROD)
		
		# –ë—Ä–∞—É–∑–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º.
		for lesson in completed_lessons:
			bot_data = load_data("Bot.json")

			# –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –≤ –∫—ç—à–µ:
			if lesson["scheduleId"] in bot_data.get("LessonScreenshots", {}):
				# –¢–∞–∫–æ–π —É—Ä–æ–∫ –µ—Å—Ç—å. –¢–∞–∫ —á—Ç–æ –º—ã –ø—Ä–æ—Å—Ç–æ –±–µ—Ä—ë–º, –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞.
				lesson.update({
					"screenshotPhotoIDs": bot_data["LessonScreenshots"][lesson["scheduleId"]]
				})

				continue

			LESSON_DIR = os.path.join(TEMP_BROWSER_DIRECTORY, "lesson-screenshots", lesson['scheduleId'])
			lesson_url = f"https://onlinemektep.net/schedule/{schedule_date}/lesson/{lesson['scheduleId']}"

			count = lessons_count.get(lesson["subject"]["subjectId"], 0) + 1
			lessons_count.update({
				lesson["subject"]["subjectId"]: count
			})
			lesson.update({
				"count": count
			})

			if os.path.exists(LESSON_DIR):
				# –°–∫—Ä–∏–Ω—à–æ—Ç—ã —É—Ä–æ–∫–∞ —É–∂–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã, –ø–æ—ç—Ç–æ–º—É –≤—ã—Ö–æ–¥–∏–º
				lesson.update({
					"screenshots": [os.path.join(LESSON_DIR, i) for i in os.listdir(LESSON_DIR) if not "Main.png" in i and os.path.isfile(os.path.join(LESSON_DIR, i))]
				})

				continue

			os.makedirs(LESSON_DIR, exist_ok=True)

			lessonScreenshots = Screenshoter.get_lesson_screenshots(driver, lesson_url, LESSON_DIR)

			lesson.update({
				"screenshots": lessonScreenshots
			})

		# –°–∫—Ä–∏–Ω—à–æ—Ç—ã –≥–æ—Ç–æ–≤—ã, —Ç–µ–ø–µ—Ä—å –∏—Ö —Å—Ç–æ–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.
		for lesson in completed_lessons:
			media = MediaGroup()
			numOfScreenshots = len(lesson.get("screenshots", []))
			are_photo_cached = False
			lesson_url = f"https://onlinemektep.net/schedule/{schedule_date}/lesson/{lesson['scheduleId']}"
			# // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É.

			# –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å "screenshotPhotoIDs" –≤ lesson, —Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö:
			if "screenshotPhotoIDs" in lesson:
				are_photo_cached = True
				numOfScreenshots = len(lesson.get("screenshotPhotoIDs", []))

				for index, screenshotID in enumerate(lesson["screenshotPhotoIDs"]):
					media.attach_photo(
						screenshotID,
						
						f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ<code>{index+1}</code> –∏–∑ <code>{numOfScreenshots}</code>, –≤–∑—è—Ç–æ–µ —Å —É—Ä–æ–∫–∞ <b><i>¬´{lesson['subject']['label']}¬ª</i></b>, –Ω–∞ –¥–∞—Ç—É <code>{schedule_date}</code>.\n<i>–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ</i>"
					)
			else:
				for index, screenshotPath in enumerate(lesson["screenshots"]):
					media.attach_photo(
						InputFile(
							screenshotPath
						),

						f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ<code>{index+1}</code> –∏–∑ <code>{numOfScreenshots}</code>, –≤–∑—è—Ç–æ–µ —Å —É—Ä–æ–∫–∞ <b><i>¬´{lesson['subject']['label']}¬ª</i></b>, –Ω–∞ –¥–∞—Ç—É <code>{schedule_date}</code>."
					)

			await msg.answer(f"#–±–ª <a href=\"{lesson_url}\"><b><u>{lesson['subject']['label'][0]}</u>{lesson['subject']['label'][1:]}</b></a>{(' <b>(' + str(lesson['count']) + '/' + str(lessons_count[lesson['subject']['subjectId']]) + ')</b>') if lessons_count.get(lesson['subject']['subjectId'], 0) > 1 else ''}, <b>{today_date()}</b>: <i>¬´{lesson['theme']['label']}¬ª</i>.")
			res_messages_list = await bot.send_media_group(msg.chat.id, media, disable_notification=True)

			if not are_photo_cached:
				# –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
				bot_data = load_data("Bot.json")
				saved_lesson_screenshots_photo_ids = bot_data.get("LessonScreenshots", {})
				if not lesson["scheduleId"] in saved_lesson_screenshots_photo_ids:
					saved_lesson_screenshots_photo_ids.update({
						lesson["scheduleId"]: []
					})

				for message_sent in res_messages_list:
					photo = message_sent["photo"][-1]

					if not photo["file_id"] in saved_lesson_screenshots_photo_ids[lesson["scheduleId"]]:
						saved_lesson_screenshots_photo_ids[lesson["scheduleId"]].append(photo["file_id"])

				bot_data.update({"LessonScreenshots": saved_lesson_screenshots_photo_ids})
				save_data(bot_data, "Bot.json")
				await asyncio.sleep(2 if are_photo_cached else 5)

		await inform_message.delete()
		
	finally:
		driver.close()

async def generate_schedule_string(msg: types.Message, full_schedule: dict, schedule_date: str, date_was_chosen_by_user: bool = False, user_access_token: None | str = None, smaller_version: bool = True) -> Tuple[str, types.InlineKeyboardMarkup]:
	keys = []
	todays_schedule = full_schedule["days"][schedule_date]
	lessons_list = ""
	keyboard = InlineKeyboardMarkup(row_width = 4)
	user_data = load_data(f"User-{msg.from_user.id}.json")
	bot_data = load_data(f"Bot.json")
	notification_msg = None

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–∫–∞—á–∞–Ω–Ω—ã–π —É—Ä–æ–∫:
	non_downloaded_lessons = [i for i in todays_schedule["schedule"] if i["scheduleId"] not in bot_data["DecodedLessonURLs"]]
	if non_downloaded_lessons:
		bot_data["WeeksAnalyzed"] += 1

		notification_msg = await msg.answer(f"<i>–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å —è –∑–∞–≥—Ä—É–∂–∞—é –≤—Å–µ <b>{len(non_downloaded_lessons)}</b> —É—Ä–æ–∫–æ–≤ –≤ {'—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —Ç–æ—Ç –¥–µ–Ω—å, —á—Ç–æ –±—ã–ª —É–∫–∞–∑–∞–Ω –º–Ω–µ' if date_was_chosen_by_user else '—Ç–≤–æ—ë–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏'}, –∞ —Ç–∞–∫ –∂–µ –∑–∞–Ω–∏–º–∞—é—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏—Ö –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-20 —Å–µ–∫—É–Ω–¥...</i>")

	for index, lesson in enumerate(todays_schedule["schedule"]):
		if index > 0:
			lessons_list += ";\n"

		score = lesson['lesson']['score'] or 0
		score = round((score / 10) * 100)

		lesson_name = smaller_lesson_names.get(
			lesson['subject']['label'], lesson['subject']['label'])
		lesson_name_full = lesson['subject']['label']

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ URL –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —É—Ä–æ–∫—É. –í unique_lesson_id –º—ã —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —É—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
		unique_lesson_id = f"{lesson['scheduleId']}_{msg.from_user.id}"

		if unique_lesson_id not in bot_data["DecodedLessonURLs"]:
			# URL –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É –Ω–µ—Ç—É, –∑–∞–∫–∞—á–∏–≤–∞–µ–º.

			# –ü–æ–ª—É—á–∞–µ–º LessonID
			lesson_info = await BL.get_lesson_info(user_data, user_data["Token"], unique_lesson_id)

			# –ü–æ–ª—É—á–∞–µ–º index.json
			index_json_url: Any = await BL.get_lesson_answers_link(
				lesson_info["data"]["lessonId"]
			)

			lesson_downloaded: str = ""
			access = await BL.get_lesson_access(user_data, user_data["Token"], lesson_info["data"]["lessonId"])
			lesson_downloaded = await BL.get_lesson_answers_file(index_json_url, access["data"]["jwt"])

			retries = 3
			lesson_decoded_url = None
			while retries > 0:
				try:
					# –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
					lesson_decoded_url = await _BL.decode_url(lesson_downloaded, unique_lesson_id)

					# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç—É –ª–∏ –æ—à–∏–±–∫–∏:
					if "Something went wrong :-(" in lesson_decoded_url:
						raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–∞, –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, —Å–µ—Ä–≤–µ—Ä –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ —É–ø–∞–ª.")
					
					break

				except:
					if retries <= 0:
						break

					await msg.answer(f"<i>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —è –Ω–µ —Å—É–º–µ–ª —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤. –Ø –ø–æ–ø—Ä–æ–±—É—é –µ—â—ë {retries} —Ä–∞–∑, –Ω–æ —Å –±–æ–ª—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π. –ï—Å–ª–∏ —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —Ç–æ —è –ø—Ä–æ–ø—É—â—É —É—Ä–æ–∫, –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞.</i>")
					await asyncio.sleep(5)
				finally:
					retries -= 1

			if lesson_decoded_url is None:
				await msg.answer("–°–∞–π—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏ —É–ø–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∂–µ.")
				raise Exception("–°–∞–π—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏ —É–ø–∞–ª.")

					

			# –°–æ—Ö—Ä–∞–Ω—è–µ–º URL
			bot_data["DecodedLessonURLs"][unique_lesson_id] = lesson_decoded_url

			# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
			bot_data["LessonsAnalyzed"] += 1

		decoded_url = bot_data["DecodedLessonURLs"][unique_lesson_id]
		broken_url = "Something went wrong :-(" in decoded_url

		if broken_url:
			# –ù–∞ –≤—Å—è–∫–∏–π.
			decoded_url = "www.error.com"

		if smaller_version:
			# –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
			lessons_list += f" ‚Ä¢ {'‚úÖ' if score else ' ' * 6} <b>[{index + 1}]</b> <a href=\"https://onlinemektep.net/schedule/{schedule_date}/lesson/{lesson['scheduleId']}\">{lesson_name_full}</a>: {score}%"

			if not broken_url:
				keys.append(InlineKeyboardButton(
					f"[{index + 1}] {lesson_name}", url=decoded_url))
		else:
			# PC-–í–µ—Ä—Å–∏—è
			lessons_list += f" ‚Ä¢ {'‚úÖ' if score else ' ' * 6} <b>[{index + 1}]</b>: {lesson['subject']['label']}, <i>¬´{shorten(lesson['theme']['label'], 40, placeholder = '...')}¬ª</i>: {score}%"
			
			if not broken_url:
				keys.append(InlineKeyboardButton(
					f"{lesson['subject']['label']}, ¬´{lesson['theme']['label']}¬ª", url=decoded_url))

		if broken_url:
			keys.append(InlineKeyboardButton(
				f"[{index + 1}] –û–®–ò–ë–ö–ê", callback_data="error-button"))

			# –£–¥–∞–ª—è–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–π URL:
			del bot_data["DecodedLessonURLs"][unique_lesson_id]

			

		

	lessons_list += "."

	keyboard.add(*keys)
	# keyboard.add(InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏", callback_data = "a"))
	save_data(user_data, f"User-{msg.from_user.id}.json")
	save_data(bot_data, "Bot.json")
	if notification_msg is not None:
		await notification_msg.delete()

	return lessons_list, keyboard

@dp.message_handler(commands=["contact", "feedback", "—Ñ–∏–¥–±—ç–∫", "—Ñ–∏–¥–±–µ–∫", "–æ—Ç–∑—ã–≤"])
async def feedback(msg: types.Message):
	user_data = load_data(f"User-{msg.from_user.id}.json")
	male = user_data.get("Male", True)

	await msg.answer(f"–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–æ–∂–Ω–æ, –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –Ω–∞–ø—Ä—è–º—É—é: @Zensonaton.\n\n–ï—Å–ª–∏ —Ç—ã —Å—Ç–æ–ª–∫–Ω—É–ª{'—Å—è' if male else '–∞—Å—å'} —Å –ø—Ä–æ–±–ª–µ–º–æ–π, —Ç–æ –ø–µ—Ä–µ—à–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–ª–µ–¥—É—é—â–µ–º—É ID: <span class=\"tg-spoiler\">{msg.from_user.id}</span>")

@dp.errors_handler()
async def global_error_handler(update: Update, error: Exception):

	if isinstance(error, FileNotFoundError):
		await update.message.answer("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç Bilimland:\n\n<code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>")
		return True

	logger.exception(error)

	await update.message.answer(f"–£–ø—Å, —É –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n\n<code>{traceback.format_exc()}</code>")
	return True

@dp.callback_query_handler(lambda call: call.data == "error-button")
async def callback_schedule_error_button(query: types.CallbackQuery):
	await bot.answer_callback_query(query.id, text="‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —ç—Ç–æ—Ç —É—Ä–æ–∫ —Å–ª–æ–º–∞–ª—Å—è.\n\n‚ÑπÔ∏è –ü—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /schedule —Å–Ω–æ–≤–∞, —á—Ç–æ –±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É –æ—à–∏–±–∫—É.", show_alert=True)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.
if __name__ == "__main__":
	logger.info("–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞...")

	if not os.path.exists("Data/Bot.json"):
		save_data({
			"DecodedLessonURLs": {},
			"StartTimestamp": datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
			"WeeksAnalyzed": 0,
			"LessonsAnalyzed": 0,
			"UniqueUsers": 0,
			"TokensGotRefreshed": 0
		}, "Bot.json")

	executor.start_polling(dp, on_startup=logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"))
