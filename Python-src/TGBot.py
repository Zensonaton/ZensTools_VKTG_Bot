# coding: utf-8

import asyncio
import datetime
import sys
from    aiogram             import 	Bot, types, md
from    aiogram.dispatcher  import 	Dispatcher
from    aiogram.utils       import 	executor, markdown
from 	aiogram.types 		import 	ReplyKeyboardRemove, \
									ReplyKeyboardMarkup, KeyboardButton, \
									InlineKeyboardMarkup, InlineKeyboardButton, Update
from    dotenv              import 	load_dotenv
import 	BL_Utils			as BL
from 	Utils 				import 	int_to_emojis, load_data, random_uuid, save_data, seconds_to_userfriendly_string, today_date, unix_time
from 	textwrap 			import 	shorten
import 	traceback
import 	logging
import 	os

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª.
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
bot = Bot(
	token       = os.environ["TG_TOKEN"],
	parse_mode  = types.ParseMode.HTML
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥.
dp  = Dispatcher(bot)

if not os.path.exists("./Logs/"):
	os.mkdir("./Logs/")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
logging.basicConfig(
	filename="Logs/TGBot.log",
)
logger = logging.getLogger(__name__)
streamHandler = logging.StreamHandler()
streamHandler.setFormatter(logging.Formatter("[%(levelname)-8s %(asctime)s at %(name)s.%(funcName)s]: %(message)s", "%d.%d.%Y %H:%M:%S"))
streamHandler.setLevel(logging.INFO)
logger.addHandler(streamHandler)

UPTIME = unix_time()

@dp.message_handler(commands = ["start", "start", "—Å—Ç–∞—Ä—Ç",])
async def message_handler(msg: types.Message):
	#–£ –±–æ—Ç–∞ –µ—Å—Ç—å <a href='https://github.com/Zensonaton/ZensonatonTools_TGBot'>–æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥</a>, –ø–æ—ç—Ç–æ–º—É —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç '–∑–∞ –∫—É–ª–∏—Å–∞–º–∏'.
	await msg.answer(
		"<b>–ü—Ä–∏–≤–µ—Ç!</b> üëã\n–î–∞–Ω–Ω—ã–π –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –æ—Ç Bilimland –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∏–Ω–∞ + –ø–∞—Ä–æ–ª—è. <i>(–æ–¥–Ω–∞–∫–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –°–û–†–∞–º–∏ –∏–ª–∏ –°–û–ß–∞–º–∏.)</i>\n\n–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —è —Å–æ–≤–µ—Ç—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É <code>/help</code>, –æ–¥–Ω–∞–∫–æ —Ç—ã –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É <code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code> –≤ –¥–µ–π—Å—Ç–≤–∏–∏."
	)

@dp.message_handler(commands=["help", "–∫–æ–º–∞–Ω–¥—ã", "–ø–æ–º–æ—â—å", "info", "–∏–Ω—Ñ–æ"])
async def help(msg: types.Message):
	await msg.answer(
		f"‚ÑπÔ∏è <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —É –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞</b>:\n\n/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å ‚Äî –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç Bilimland.\n/schedule ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ –≤ Bilimland, –∞ —Ç–∞–∫ –∂–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–≤–µ—Ç—ã. <i>–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.</i>\n/feedback ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É –±–æ—Ç–∞ –≤ —Å–ª—É—á–∞–µ, –∫ –ø—Ä–∏–º–µ—Ä—É, –±–∞–≥–∞.\n\nüêõüî´ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —É –±–æ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö:\n<b>1</b>. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ 23:00 - 00:00.\n–í—Å–µ —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã –±—É–¥—É—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n<span class=\"tg-spoiler\">üöß –í –±—É–¥—É—â–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π <b>–±–æ—Ç, —Å–∞–º, –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ</b>, –±—É–¥–µ—Ç —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –æ–¥–Ω–∞–∫–æ —à–∞–Ω—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–∫–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–ª –≤–≤–∏–¥—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.</span>"
	)

@dp.message_handler(commands=["stats", "stat", "—Å—Ç–∞—Ç—ã", "statistics", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
async def stats(msg: types.Message):
	bot_data = load_data("Bot.json")

	startDate = datetime.datetime.strptime(bot_data['StartTimestamp'], '%d.%m.%Y %H:%M:%S')

	await msg.answer(
		f"–ó–∞ <b>{(datetime.datetime.now() - startDate).days}</b> –¥–Ω–µ–π —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã, <i>(–ø–µ—Ä–∏–æ–¥ —Å <b>{startDate}</b> –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)</i> –±–æ—Ç —Å—É–º–µ–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å <b>{bot_data['WeeksAnalyzed']}</b> —É—á–µ–±–Ω—ã—Ö –Ω–µ–¥–µ–ª—å, —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ ‚Äî <b>{bot_data['LessonsAnalyzed']}</b>. –ê–∫—Ç–∏–≤–Ω—ã—Ö <s>—Å–ø–∏—Å—ã–≤–∞—é—â–∏—Ö</s> –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö —Å–µ–±—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –±–æ—Ç–∞ ‚Äî <b>{bot_data['UniqueUsers']}</b>, —Å–µ—Å—Å–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ <i>(—Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–≤—ã–ø—É—â–µ–Ω–æ)</i>: <b>{bot_data['TokensGotRefreshed']}</b>. Uptime –±–æ—Ç–∞: <b>{seconds_to_userfriendly_string(unix_time() - UPTIME, weeks=True, months=True)}</b>."
	)

@dp.message_handler(commands = ["login", "–ª–æ–≥–∏–Ω"])
async def login_handler(msg: types.Message):
	arguments = msg.get_args().split(" ")

	if len(arguments) != 2:
		await msg.answer("–î–ª—è –≤—Ö–æ–¥–∞ –Ω—É–∂–µ–Ω –ª–æ–≥–∏–Ω <b>–∏</b> –ø–∞—Ä–æ–ª—å.\n\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: <code>/login alexey_victor 123456</code>")
		return

	# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∏.
	await msg.delete()

	await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —è –ø–æ–ø—Ä–æ–±—É—é –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π. üôÉüëç\n\n<i>(–ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö.)</i> üëÄ")
	greet_sticker = await msg.answer_sticker("CAACAgEAAxkBAAEDEzlhZ-J2G8SuIVt0ahDnsHMAAbt-jfwAAudrAAKvGWIHhIr-D4PhzQQhBA")

	# –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.
	login_result = await BL.login(arguments[0], arguments[1], msg.from_user.id)

	# –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, login_result –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ç—Ä–∏–±—É—Ç–µ "message".
	if "message" in login_result:
		# –£–¥–∞–ª—è–µ–º —Ä–∞–¥–æ—Å—Ç–Ω—ã–π —Å—Ç–∏–∫–µ—Ä.
		await greet_sticker.delete()

		await msg.answer_sticker("CAACAgEAAxkBAAEDEzthZ-PBNrIKxd1YItQmcTItwNi1VwACcIMAAq8ZYgfAbLJhK3qxuiEE")

		if login_result["message"] == "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å":
			await msg.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: <b>–ü–∞—Ä–æ–ª—å –∏/–ª–∏ –ª–æ–≥–∏–Ω –Ω–µ –≤–µ—Ä–Ω—ã</b>. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!") 
		else:
			await msg.answer(f"–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —è –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ç–∞–∫–æ–π –æ—à–∏–±–∫–µ: <code>{login_result['message']}</code>.") 

		return

	await msg.answer(f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ø–∞—Ä–æ–ª—å –∏ –ª–æ–≥–∏–Ω –≤–µ—Ä–Ω—ã, –∏ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, <b><i>{login_result['FirstName']}!</i></b> üëç\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: /schedule")

@dp.message_handler(commands = ["sched", "schedule", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–∑–∞–¥–∞–Ω–∏—è", "—Å–ø–∏—Å–æ–∫", "—É—Ä–æ–∫–∏"])
async def sched_handler(msg: types.Message):
	user_data 					= load_data(f"User-{msg.from_user.id}.json")

	if not "Token" in user_data:
		await msg.answer("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç Bilimland:\n\n<code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>")

		return

	today = today_date()
	try:
		full_schedule = await BL.get_schedule(
			user_data, user_data["Token"])
	except:
		await msg.answer_sticker("CAACAgEAAxkBAAEDEzthZ-PBNrIKxd1YItQmcTItwNi1VwACcIMAAq8ZYgfAbLJhK3qxuiEE")

		await msg.answer("<i>–£–ø—Å</i>, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–º–∞–ª–∞—Å—å üò®\n\n–ü–æ–ø—Ä–æ–±—É–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –≤–µ–¥—å —è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–µ-–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª —Ç–µ–±—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É <code>/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>.\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, —Ç–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /feedback.")
		del user_data["Token"]
		save_data(user_data, f"User-{msg.from_user.id}.json")

		return

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
	if today not in full_schedule["days"]:
		await msg.answer("–£-—É–ø—Å! –Ø —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–æ–π, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. –≠—Ç–æ—Ç –±–∞–≥ –º–Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ. –ê —Å–µ–π—á–∞—Å, —Ç—ã –º–æ–∂–µ—à—å –ª–∏—à—å –ø–æ–¥–æ–∂–¥–∞—Ç—å <code>00:00</code>, –∞ –µ—â—ë –±—É–¥–µ—Ç –ª—É—á—à–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞ –¥–Ω—ë–º!")

		return

	todays_schedule 			= full_schedule["days"][today]
	sched_str, sched_keyboard 	= await generate_schedule_string(msg, full_schedule, True)

	await msg.answer(
		# f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, <code>{today}</code>. –£ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è {int_to_emojis(len(todays_schedule['schedule']))} —É—Ä–æ–∫–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö:\n{sched_str}\n<code>{'„Ö§' * 30}</code>\n–ö–∞–∫–æ–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å? ü§î\n<i>(–∑–∞–º–µ—Ç–∫–∞: –±–∞–ª–ª, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞.)</i>",
		f"üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, <code>{today}</code>. –£ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è {int_to_emojis(len(todays_schedule['schedule']))} —É—Ä–æ–∫–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö:\n{sched_str}\n<code>{'„Ö§' * 30}</code>\n–ö–ª–∏–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∞–π—Ç–∞ —Å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º —É—Ä–æ–∫–æ–º! üòú",
		reply_markup=sched_keyboard
	)
	
# @dp.message_handler(content_types = types.ContentType.DOCUMENT)
# async def process_document(msg: types.Message):
# 	if msg.document.mime_type == "application/json":
# 		await msg.reply("JSON")
# 		return
# 	elif msg.document.mime_type == "text/plain":
# 		await msg.reply("PLAIN")
# 		return
		
# 	await msg.reply("‚ö† –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–±–æ—é —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è `\.JSON`\-—Ñ–∞–π–ª–æ–º\. –í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ç–æ—Ç —Ñ–∞–π–ª\.")

async def generate_schedule_string(msg: types.Message, full_schedule: dict, smaller_version: bool) -> str:
	keys = []
	today = today_date()
	todays_schedule = full_schedule["days"][today]
	lessons_list = ""
	keyboard = InlineKeyboardMarkup(row_width = 4)
	user_data = load_data(f"User-{msg.from_user.id}.json")
	bot_data = load_data(f"Bot.json")
	notification_msg = None

	smaller_lesson_names = {
		"–ê–ª–≥–µ–±—Ä–∞ –∏ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞": "–ê–ª–≥–µ–±—Ä–∞",
		"–†—É—Å—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–†—É—Å. –ª–∏—Ç.",
		"–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫": "–ê–Ω–≥–ª. —è–∑.",
		"–ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–ö–∞–∑. —è–∑/–ª–∏—Ç.",
		"–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (5-11 –∫–ª–∞—Å—Å—ã)": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
		"–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞": "–§–∏–∑/—Ä–∞",
		"–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑.",
		"–û—Å–Ω–æ–≤—ã –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –±–∏–∑–Ω–µ—Å–∞": "–û—Å–Ω. –±–∏–∑–Ω–µ—Å–∞",
	}

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–∫–∞—á–∞–Ω–Ω—ã–π —É—Ä–æ–∫:
	non_downloaded_lessons = [i for i in todays_schedule["schedule"] if i["scheduleId"] not in bot_data["DecodedLessonURLs"]]
	if non_downloaded_lessons:
		bot_data["WeeksAnalyzed"] += 1

		notification_msg = await msg.answer(f"<i>–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å —è –∑–∞–≥—Ä—É–∂–∞—é –≤—Å–µ <b>{len(non_downloaded_lessons)}</b> —É—Ä–æ–∫–æ–≤ –≤ —Ç–≤–æ—ë–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –∞ —Ç–∞–∫ –∂–µ –∑–∞–Ω–∏–º–∞—é—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏—Ö –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-20 —Å–µ–∫—É–Ω–¥...</i>")

	for index, lesson in enumerate(todays_schedule["schedule"]):
		if index > 0:
			lessons_list += ";\n"

		score = lesson['lesson']['score'] or 0
		score = round((score / 10) * 100)

		lesson_name = smaller_lesson_names.get(
			lesson['subject']['label'], lesson['subject']['label'])
		lesson_name_full = lesson['subject']['label']

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ URL –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —É—Ä–æ–∫—É.
		if lesson["scheduleId"] not in bot_data["DecodedLessonURLs"]:
			# URL –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É –Ω–µ—Ç—É, –∑–∞–∫–∞—á–∏–≤–∞–µ–º.

			# –ü–æ–ª—É—á–∞–µ–º LessonID
			lesson_info = await BL.get_lesson_info(lesson["scheduleId"], user_data["Token"])
			# –ü–æ–ª—É—á–∞–µ–º index.json
			lesson_downloaded = await BL.get_index_json(lesson_info["data"]["lessonId"])
			retries = 3
			lesson_decoded_url = None
			while retries > 0:
				try:
					# –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
					lesson_decoded_url = await BL.decode_url(lesson_downloaded, lesson["scheduleId"])

					# –ß–µ–∫–∞–µ–º, –Ω–µ—Ç—É –ª–∏ –æ—à–∏–±–∫–∏:
					if "Something went wrong :-(" in lesson_decoded_url:
						raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–∞, –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ —É–ø–∞–ª.")
					
					break

				except:
					await msg.answer(f"<i>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —è –Ω–µ —Å—É–º–µ–ª —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤. –Ø –ø–æ–ø—Ä–æ–±—É—é –µ—â—ë {retries} —Ä–∞–∑, –Ω–æ —Å –±–æ–ª—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.</i>")
					await asyncio.sleep(5)
				finally:
					retries -= 1

			if lesson_decoded_url is None:
				await msg.answer("–°–∞–π—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏ —É–ø–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∂–µ.")

				return

					

			# –°–æ—Ö—Ä–∞–Ω—è–µ–º URL
			bot_data["DecodedLessonURLs"][lesson["scheduleId"]] = lesson_decoded_url

			# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
			bot_data["LessonsAnalyzed"] += 1

		decoded_url = bot_data["DecodedLessonURLs"][lesson["scheduleId"]]
		broken_url = "Something went wrong :-(" in decoded_url

		if broken_url:
			# –ù–∞ –≤—Å—è–∫–∏–π.
			decoded_url = "www.error.com"

		if smaller_version:
			# –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
			lessons_list += f" ‚Ä¢ {'‚úÖ' if score else ' ' * 6} <b>[{index + 1}]</b> {lesson_name_full}: {score}%"

			if not broken_url:
				keys.append(InlineKeyboardButton(
					f"[{index + 1}] {lesson_name}", url=decoded_url))
		else:
			# PC-–í–µ—Ä—Å–∏—è
			lessons_list += f" ‚Ä¢ {'‚úÖ' if score else ' ' * 6} <b>[{index + 1}]</b>: {lesson['subject']['label']}, <i>¬´{shorten(lesson['theme']['label'], 40, placeholder = '...')}¬ª</i>: {score}%"
			
			if not broken_url:
				keys.append(InlineKeyboardButton(
					f"{lesson['subject']['label']}, ¬´{lesson['theme']['label']}¬ª", url=decoded_url))

		if broken_url:
			keys.append(InlineKeyboardButton(
                f"[{index + 1}] –û–®–ò–ë–ö–ê", callback_data="error-button"))

			# –£–¥–∞–ª—è–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–π URL:
			del bot_data["DecodedLessonURLs"][lesson["scheduleId"]]

			

		

	lessons_list += "."

	keyboard.add(*keys)
	# keyboard.add(InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏", callback_data = "a"))
	save_data(user_data, f"User-{msg.from_user.id}.json")
	save_data(bot_data, "Bot.json")
	if notification_msg is not None:
		await notification_msg.delete()

	return lessons_list, keyboard


@dp.message_handler(commands=["contact", "feedback", "—Ñ–∏–¥–±—ç–∫", "—Ñ–∏–¥–±–µ–∫", "–æ—Ç–∑—ã–≤—ã"])
async def feedback(msg: types.Message):
	user_data = load_data(f"User-{msg.from_user.id}.json")
	male = user_data.get("Male", True)

	await msg.answer(f"–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–æ–∂–Ω–æ, –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –Ω–∞–ø—Ä—è–º—É—é: @Zensonaton.\n\n–ï—Å–ª–∏ —Ç—ã —Å—Ç–æ–ª–∫–Ω—É–ª{'—Å—è' if male else '–∞—Å—å'} —Å –ø—Ä–æ–±–ª–µ–º–æ–π, —Ç–æ –ø–µ—Ä–µ—à–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–ª–µ–¥—É—é—â–µ–º—É ID: <span class=\"tg-spoiler\">{msg.from_user.id}</span>")

@dp.errors_handler()
async def global_error_handler(update: Update, error: Exception):

	logger.exception(error)

	await update.message.answer(f"–£–ø—Å, —É –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n\n<code>{traceback.format_exc()}</code>")
	return True


@dp.callback_query_handler(lambda call: call.data == "error-button")
async def vote_down_cb_handler(query: types.CallbackQuery):
    await bot.answer_callback_query(query.id, text="‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —ç—Ç–æ—Ç —É—Ä–æ–∫ —Å–ª–æ–º–∞–ª—Å—è.\n\n‚ÑπÔ∏è –ü—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /schedule —Å–Ω–æ–≤–∞, —á—Ç–æ –±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É –æ—à–∏–±–∫—É.", show_alert=True)



# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.
if __name__ == "__main__":
	logger.info("–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞...")

	if not os.path.exists("Data/Bot.json"):
		save_data({
			"DecodedLessonURLs": {},
			"StartTimestamp": datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
			"WeeksAnalyzed": 0,
			"LessonsAnalyzed": 0,
			"UniqueUsers": 0,
			"TokensGotRefreshed": 0
		}, "Bot.json")

	executor.start_polling(dp, on_startup=logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"))
